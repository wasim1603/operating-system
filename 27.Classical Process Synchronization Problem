#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_PHILOSOPHERS 5

pthread_mutex_t chopstick[NUM_PHILOSOPHERS];

void *philosopher(void *arg) {
    int id = *((int *)arg);
    int leftChopstick = id;
    int rightChopstick = (id + 1) % NUM_PHILOSOPHERS;

    while (1) {
        pthread_mutex_lock(&chopstick[leftChopstick]);
        printf("Philosopher %d picked up left chopstick.\n", id);

        pthread_mutex_lock(&chopstick[rightChopstick]);
        printf("Philosopher %d picked up right chopstick.\n", id);

        printf("Philosopher %d is eating.\n", id);

        pthread_mutex_unlock(&chopstick[leftChopstick]);
        printf("Philosopher %d put down left chopstick.\n", id);

        pthread_mutex_unlock(&chopstick[rightChopstick]);
        printf("Philosopher %d put down right chopstick.\n", id);

        printf("Philosopher %d is thinking.\n", id);
    }

    return NULL;
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&chopstick[i], NULL);
        ids[i] = i;
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }

    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    return 0;
}
